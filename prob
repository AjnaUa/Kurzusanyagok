norm_function <- function (mu = 0 , sigma = 1 , z = mu) {
  
  # normal distribution DF and CDF
  x <- seq (mu - 3 * sigma , mu + 3 * sigma , length.out = 100)
  fx <- dnorm (x , mu , sigma)
  Fx <- pnorm (x , mu , sigma)
  
  dz <- data.frame (variable = x , 
                    DF = fx,
                    CDF = Fx)
  p <- round (pnorm (z , mean = mu , sd = sigma) , 3)
  
  library (ggplot2)
  g1 <- ggplot (dz , aes (x = variable , y = DF)) +
    geom_path () +
    geom_area (mapping = aes (x = ifelse (x < z , x, 0)), fill = "red") +
    geom_vline(xintercept = z , lty = 2) +
    annotate ("text" , label = str_c ("z = " , z) ,
              x = z , y = 0.1) +
    scale_y_continuous (limits = c (0 , 1)) +
    theme_classic()
  g2 <- ggplot (dz , aes (x = variable , y = CDF)) +
    geom_path ()+
    geom_vline(xintercept = z , lty = 2) +
    geom_hline(yintercept = p, col = "red") +
    annotate ("text" , label = str_c ("p = " , p) ,
              x = z , y = p + 0.15) +
    theme_classic()
  
  library (patchwork)
  g1 /g2
  
}

t_dist <- function (df) {
  
  t <- rt (n = 1000 , df = df)
  
  sk <- round (psych::describe (t)$skew, 1)
  ku <- round (psych::describe (t)$kurtosis, 1)
  
  data <- data.frame (t = seq (-3 , 3 , 0.01))
  
  ggplot (data , aes (x = t)) +
    stat_function (fun = dnorm , args = list (mean = 0 , sd = 1)) +
    stat_function (fun = dt , args = list (df = df), col = "blue") +
    annotate (geom = "text" , x = -0.15 , y = 0.2 , 
              label = paste ("df = " , df )) +
    annotate (geom = "text" , x = -0.15 , y = 0.15 , 
              label = paste ("skew = " , sk )) +
    annotate (geom = "text" , x = -0.15 , y = 0.1 , 
              label = paste ("kurt = " , ku )) +
    labs (y = NULL ,
          title = "Student's t-distribution" ,
          subtitle = str_c ("with " , df , " degrees of freedom")) +
    theme_classic()
  
}

F_dist <- function (alpha = 0.05 , df1 , df2 , F_stat = 0) {

  F_critic <- qf (1 - alpha , df1 , df2)
  x <- seq (0 , round (max (F_stat, F_critic + 2) , 1) , by = 0.1)
  
  ggplot (as.data.frame (x) , aes (x = x)) +
  geom_function (fun = df , args = list (df1 = df1 , df2 = df2), aes (color = "DF")) +
  geom_function (fun = pf , args = list (df1 = df1 , df2 = df2), aes (color = "CDF")) +
  geom_vline (xintercept = F_critic , color = "red") +
  geom_vline (xintercept = F_stat , lty = 2) +
  labs (title = str_c ("F distribution with " , df1 , " and " , df2 , " degrees of freedom") ,
        caption = "red line: critical value 
                   dashed line: test statistic" ,
        x = "F" ,
        y = NULL) +
  theme_bw ()
  
}

Chi2_dist <- function (alpha = 0.05 , df , Chi2_stat = 0) {
  
  Chi2_critic <- qchisq (1 - alpha , df)
  x <- seq (0 , round (max (Chi2_stat, Chi2_critic + 2) , 1) , by = 0.1)
  
  ggplot (as.data.frame (x) , aes (x = x)) +
    geom_function (fun = dchisq , args = list (df = df), aes (color = "DF")) +
    geom_function (fun = pchisq , args = list (df = df), aes (color = "CDF")) +
    geom_vline (xintercept = Chi2_critic) +
    labs (title = str_c ("Chi2 distribution with " , df , " degrees of freedom")) +
    theme_bw ()
  
}

t_stat_draw <- function ( test , alpha = 0.05 ) {
  
  x = data.frame ( t = seq (-3 , +3 , 0.01) )
  
  t = test[["statistic"]][["t"]] %>% round (1)
  df = test[["parameter"]] 
  type = test[["alternative"]]
  p = test[["p.value"]] %>% round (3) 
  
  prob <- 
    case_when(
      type == "less" ~  alpha ,
      type == "two.sided" ~  c (alpha/2 , 1-alpha/2 ) ,
      type == "greater" ~  1-alpha ,
    )
  
if (t > 3) {
    
  ggplot ( data = x, aes ( x = t ) ) +
    stat_function ( fun = dt , aes ( color = "DF" ), 
                    args = list ( df ) ) +
    stat_function ( fun = pt , aes ( color = "CDF" ), 
                    args = list ( df ) ) +
    geom_vline ( xintercept = qt ( prob , df ) , 
                 color = "red" ) +
    geom_vline ( xintercept = t , 
                 color = "black" ,
                 linetype = "dashed" ) +
    annotate ("text" , label = str_c ("t = " , t , "\n p = " , p) ,
              x = 3 , y = 0.1) +
    scale_x_continuous ( breaks = seq ( -3 , +3 , 1 ) ,
                         limits = c ( -4 , +4 ) ) +
    scale_colour_manual ( name = "Function" ,
                          values = c ( DF = "black" , 
                                       CDF = "blue" ) ) +
    labs ( y = NULL ,
           title = "Student t-distribution" ,
           subtitle = str_c (type , " test results") ,
           caption = "red line: critical values
           dashed line: test statistic" ) +
    theme_minimal( ) 
  
} else if (t < -3) {
  
  ggplot ( data = x, aes ( x = t ) ) +
    stat_function ( fun = dt , aes ( color = "DF" ), 
                    args = list ( df ) ) +
    stat_function ( fun = pt , aes ( color = "CDF" ), 
                    args = list ( df ) ) +
    geom_vline ( xintercept = qt ( prob , df ) , 
                 color = "red" ) +
    geom_vline ( xintercept = t , 
                 color = "black" ,
                 linetype = "dashed" ) +
    annotate ("text" , label = str_c ("t = " , t , "\n p = " , p) ,
              x = -3 , y = 0.1) +
    scale_x_continuous ( breaks = seq ( -3 , +3 , 1 ) ,
                         limits = c ( -4 , +4 ) ) +
    scale_colour_manual ( name = "Function" ,
                          values = c ( DF = "black" , 
                                       CDF = "blue" ) ) +
    labs ( y = NULL ,
           title = "Student t-distribution" ,
           subtitle = str_c (type , " test results") ,
           caption = "red line: critical values
           dashed line: test statistic" ) +
    theme_minimal( ) 
  
} else {
  
  ggplot ( data = x, aes ( x = t ) ) +
    stat_function ( fun = dt , aes ( color = "DF" ), 
                    args = list ( df ) ) +
    stat_function ( fun = pt , aes ( color = "CDF" ), 
                    args = list ( df ) ) +
    geom_vline ( xintercept = qt ( prob , df ) , 
                 color = "red" ) +
    geom_vline ( xintercept = t , 
                 color = "black" ,
                 linetype = "dashed" ) +
    annotate ("text" , label = str_c ("t = " , t , "\n p = " , p) ,
              x = t , y = 0.1) +
    scale_x_continuous ( breaks = seq ( -3 , +3 , 1 ) ,
                         limits = c ( -4 , +4 ) ) +
    scale_colour_manual ( name = "Function" ,
                          values = c ( DF = "black" , 
                                       CDF = "blue" ) ) +
    labs ( y = NULL ,
           title = "Student t-distribution" ,
           subtitle = str_c (type , " test results") ,
           caption = "red line: critical values
           dashed line: test statistic" ) +
    theme_minimal( ) 
  
}
  
}
