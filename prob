if (!require("pacman")) install.packages("pacman")
pacman::p_load ("latex2exp" , "tidyverse" , "patchwork")
library (latex2exp)
library (tidyverse)
library (patchwork)

norm_function <- function (mu = 0 , sigma = 1 , z = mu , tail = "left") {
  
  # for x ~ N(mu , sigma) calculates right, left two-sided probabilities at test statistic (z)
  
  # below the computed test statistic for left tail tests
  # For two-tailed tests, the probability that lies above the positive value of the computed test statistic plus the
  # probability that lies below the negative value of the computed test statistic.
  
  dif <- abs (mu - z)
  # normal distribution DF and CDF in the area of 3sig from the mean
  x <- seq (mu - 3 * sigma , mu + 3 * sigma , length.out = 100)
  fx <- dnorm (x , mu , sigma)
  Fx <- pnorm (x , mu , sigma)
  x_zl <-  ifelse (x <= z , x , NA)
  x_zr <-  ifelse (x >= z , x , NA)
  x_z  <-  ifelse (!between (x , mu - dif , mu + dif) , 
                   x , NA)
  dz <- data.frame (variable = x , 
                    DF = fx,
                    CDF = Fx ,
                    critic_areal <- x_zl ,
                    critic_arear <- x_zr ,
                    critic_area  <- x_z)
  
  p <- round (pnorm (z , mean = mu , sd = sigma) , 3)
  
  g1 <- ggplot (dz , aes (x = variable , y = DF)) +
    geom_path () +
    geom_vline (xintercept = z , lty = 2) +
    scale_y_continuous (expand = c (0 ,0)) +
    theme_classic()
  
  if (tail == "two") {
    
    g1 <- g1 + geom_area (mapping = aes (x = ifelse (x <= mu - dif , x , NA)) ,
                          fill = "red") +
               geom_area (mapping = aes (x = ifelse (x >= mu + dif , x , NA)) ,
                          fill = "red") +
               annotate ("text" , label = str_c ("z = " , z) ,
                         x = z , y = Inf , vjust = 1) 
    
  } else if (tail == "right")  {
    
    g1 <- g1 + geom_area (mapping = aes (x = critic_arear) , fill = "red") +
               annotate ("text" , label = str_c ("z = " , z) ,
                         x = z , y = Inf , vjust = 1) 
  } else {
    
    g1 <- g1 + geom_area (mapping = aes (x = critic_areal) , fill = "red") +
               annotate ("text" , label = str_c ("z = " , z) ,
                         x = z , y = Inf , vjust = 1) 
  } 
  
  g2 <- ggplot (dz , aes (x = variable , y = CDF)) +
    geom_path ()+
    geom_vline(xintercept = z , lty = 2) +
    geom_hline(yintercept = p, col = "blue") +
    scale_y_continuous (limits = c (0 , 1) , expand = c (0 ,0)) +
    theme_classic()
  
  if (tail == "two") {
    
    g2 <- g2 +     
      annotate ("text" , label = str_c ("p/2 = " , p) ,
                x = z , y = p + 0.15) 
    
  } else if (tail == "right") {
    
    g2 <- g2 +     
      annotate ("text" , label = str_c ("1 - p = " , p) ,
                x = z , y = p - 0.05) 
    
  } else {
    
    g2 <- g2 +     
      annotate ("text" , label = str_c ("p = " , p) ,
                x = z , y = p + 0.15) 
    
  }
  
  g1 /g2 + patchwork::plot_annotation(
   
    title = TeX ("$\\N(\\mu,\\sigma)$") ,
    subtitle = str_c ("distribution of the variable ~ ", tail , " tail") ,
    caption = "the probability that lies above a z value for rigth tail\n the probability that lies below a z value for left tail" )
  
}

t_dist <- function (df) {
  
  t <- rt (n = 1000 , df = df)
  
  sk <- round (psych::describe (t)$skew, 1)
  ku <- round (psych::describe (t)$kurtosis, 1)
  
  data <- data.frame (t = seq (-3 , 3 , 0.01))
  
  ggplot (data , aes (x = t)) +
    stat_function (fun = dnorm , args = list (mean = 0 , sd = 1)) +
    stat_function (fun = dt , args = list (df = df), col = "blue") +
    annotate (geom = "text" , x = -0.15 , y = 0.2 , 
              label = paste ("df = " , df )) +
    annotate (geom = "text" , x = -0.15 , y = 0.15 , 
              label = paste ("skew = " , sk )) +
    annotate (geom = "text" , x = -0.15 , y = 0.1 , 
              label = paste ("kurt = " , ku )) +
    labs (y = NULL ,
          title = "Student's t-distribution" ,
          subtitle = str_c ("with " , df , " degrees of freedom")) +
    theme_classic()
  
}

Chi2_dist <- function (alpha = 0.05 , df , Chi2_stat = 0) {
  
  Chi2_critic <- qchisq (1 - alpha , df)
  p <- pchisq (q = Chi2_stat , df)
  x <- seq (0 , round (max (Chi2_stat, Chi2_critic + 4) , 1) , length.out = 100)
  Chi <- dchisq (x = x , df = df)
  
  g1 <- 
  ggplot (data.frame (x = x , y = Chi) , aes (x = x , y = y)) +
    geom_path () +
    geom_area (aes (x = ifelse (x >= Chi2_critic , x , NA)) , fill = "red") +
    geom_vline (xintercept = Chi2_critic , color = "red") +
    annotate ("text" , label = str_c ("Chi2_" , 1-alpha , "( " , df , " ) = " ,
                                      round (Chi2_critic , 2)) ,
              x = Chi2_critic , y = 0.1) +
    geom_vline (xintercept = Chi2_stat , lty = 2) +
    labs (title = "Density function" ,
          x = NULL,
          y = NULL) +
    theme_classic () +
    theme (axis.text.y = element_blank())
  
  g2 <- 
  ggplot (as.data.frame (x) , aes (x = x)) +
    geom_function (fun = pchisq , args = list (df = df)) +
    geom_vline (xintercept = Chi2_stat , lty = 2) +
    geom_hline (yintercept = p , lty = 2) +
    annotate ("text" , label = str_c ("1 - p = " , round (p , 3) , 
                                      "\n p = " , round (1 - p , 3)) ,
              x = Chi2_stat , y = p - 0.1) +
    labs (title = "Cummulative distribution function" ,
          x = "Chi2",
          y = NULL) +
    theme_bw ()
  
  g1 / g2 + patchwork::plot_annotation (
    title = str_c ("Chi2 distribution with " , df , " degrees of freedom") ,
    caption = "red line: critical value 
                     dashed line: test statistic"
  )
  
}

F_dist <- function (alpha = 0.05 , df1 , df2 , F_stat = 0) {
  
  F_critic <- qf (1 - alpha , df1 , df2)
  p <- pf (q = F_stat , df1 , df2)
  x <- seq (0 , round (max (F_stat, F_critic + 2) , 1) , by = 0.01)
  y <- df (x , df1 , df2)
  
  g1 <- 
  ggplot (data.frame (x = x , y = y) , aes (x , y)) +
    geom_path () +
    geom_area (aes (x = ifelse (x > F_critic , x , NA)) ,
               fill = "red") +
    geom_vline (xintercept = F_critic , color = "red") +
    annotate ("text" , label = str_c ("F_" , 1-alpha , "( " , df1 , " ; " , df2 , " ) = " ,
                                      round (F_critic , 2)) ,
              x = F_critic , y = 0.5) +
    geom_vline (xintercept = F_stat , lty = 2) +
    labs (title = "Density function" ,
          x = NULL ,
          y = NULL) +
    theme_classic () +
    theme (axis.text.y = element_blank())
  
  g2 <- 
  ggplot (as.data.frame (x) , aes (x = x)) +
    geom_function (fun = pf , args = list (df1 = df1 , df2 = df2)) +
    geom_vline (xintercept = F_critic , color = "red") +
    geom_vline (xintercept = F_stat , lty = 2) +
    geom_hline (yintercept = p , lty = 2) +
    annotate ("text" , label = str_c ("1 - p = " , round (p , 3) , 
                                      "\n p = " , round (1 - p , 3)) ,
              x = F_stat , y = p - 0.1 , hjust = "right") +
    labs (title = "Cumulative distributioin function" ,
          x = "F" ,
          y = NULL) +
    theme_bw ()
  
  g1 / g2 + plot_annotation (
    title = str_c ("F distribution with " , df1 , " and " , df2 , " degrees of freedom") ,
    caption = "red line: critical value 
                   dashed line: test statistic" 
  )
  
}

t_stat_draw <- function ( test , alpha = 0.05 ) {
  
  if (!require("pacman")) install.packages("pacman")
  pacman::p_load ("latex2exp" , "tidyverse")
  library ("latex2exp")
  library ("tidyverse")
  
  type = test[["alternative"]]
  t = test[["statistic"]][["t"]] 
  t <- ifelse (abs (t) > 1 , round (t , 1) , round (t , 2))
  df = test[["parameter"]] 
  p = test[["p.value"]] %>% round (3) 
  mean = test[["estimate"]]
  SE = test[["stderr"]]
  
  min <- test[["null.value"]] - 3 * SE
  max <- test[["null.value"]] + 3 * SE
  
  x = data.frame ( t_value = seq (-3 , +3 , length.out = 100) ,
                   x = seq (min , max , length.out = 100))
  x$dt <-  dt (x$t_value , df = df)
  
  prob <- 
    case_when(
      type == "less" ~  alpha ,
      type == "two.sided" ~  c (alpha/2 , 1-alpha/2 ) ,
      type == "greater" ~  1-alpha 
    )
  
  
  g1 <- ggplot ( data = x, aes ( x = x ) ) +
    stat_function ( fun = dnorm , 
                    args = list ( mean =  test[["null.value"]] ,
                                  sd = SE) ) +
    geom_vline ( xintercept = qnorm (p = prob , mean = test[["null.value"]] ,sd = SE) ,
                 color = "red" ) +
    geom_vline ( xintercept = mean , 
                 color = "black" ,
                 linetype = "dashed" ) +
    annotate ("text" , label = str_c ("mean = " , round (mean , 2)) ,
              x = case_when (mean > max ~ max ,
                             mean < min ~ min ,
                             TRUE ~ mean), 
              y = Inf, hjust = 1, vjust = 1 , col = "blue") +
    scale_x_continuous ( breaks = round (seq ( min , max , SE ) , 1) ,
                         limits = c ( min - SE , max + SE ) ) +
    labs ( y = NULL , 
           x = TeX ("$\\bar{x}$") ,
           title = "sampling distribution of sample means given H0") +
    theme_classic() +
    theme (axis.text.y = element_blank())
  
  g2 <- ggplot ( data = x, aes ( x = t_value , y = dt) ) +
    geom_path ( ) +
    geom_vline ( xintercept = qt ( prob , df ) , 
                 color = "red" ) +
    geom_vline ( xintercept = t , 
                 color = "black" ,
                 linetype = "dashed" ) +
    annotate ("text" , label = str_c ("t = " , t) ,
              x = case_when (t > 3.5 ~ 3 ,
                             t < -3.5 ~ -3 ,
                             TRUE ~ t), 
              y = Inf, hjust = 1, vjust = 1 , col = "blue") +
    scale_x_continuous ( breaks = seq ( -3 , +3 , 1 ) ,
                         limits = c ( -4 , +4 ) ) +
    labs ( x = TeX ("$t$") ,
           y = NULL ,
           title = "sampling distribution of test statistic given H0") +
    theme_classic() +
    theme (axis.text.y = element_blank())
  
  if (type == "two.sided") {
    
    g2 <- g2 +
      geom_area (mapping = aes (
        x = ifelse (t_value <= qt ( prob [1] , df ) , t_value , NA)
      ) , fill = "red") +
      geom_area (mapping = aes (
        x = ifelse (t_value >= qt ( prob [2] , df ) , t_value , NA)
      ) , fill = "red")
    
  } else if (type == "less") {
    
    g2 <- g2 +
      geom_area (mapping = aes (
        x = ifelse (t_value <= qt ( prob [1] , df ) , t_value , NA)
      ) , fill = "red") 
    
  } else {
    
    g2 <- g2 +
      geom_area (mapping = aes (
        x = ifelse (t_value >= qt ( prob [2], df ) , t_value , NA)
      ) , fill = "red") 
    
  }
  
  g3 <- 
    ggplot ( data = x, aes ( x = t_value ) ) +
    stat_function ( fun = pt , args = list ( df ) ) +
    geom_vline ( xintercept = qt ( prob , df ) , 
                 color = "red" ) +
    geom_vline ( xintercept = t , 
                 color = "black" ,
                 linetype = 2 ) +
    geom_hline ( yintercept = pt (q = t , df = df) , 
                 color = "grey50" ,
                 linetype = 3 ) +
    annotate ("text" , 
              label = str_c ( case_when ( type == "less" ~  "p = " ,
                                          type == "two.sided" ~  ifelse (t<0 , "p / 2 = " , "1 - p / 2 = ") ,
                                          type == "greater" ~  "1 - p = " ) , 
                              round (pt (q = t , df = df) , 3)) ,
              y = Inf, 
              x = case_when (t > 3.5 ~ 3 ,
                             t < -3.5 ~ -3 ,
                             TRUE ~ t), 
              col = "blue" , hjust = 1 , vjust = 1) +
    scale_x_continuous ( breaks = seq ( -3 , +3 , 1 ) ,
                         limits = c ( -4 , +4 ) ) +
    labs ( x = TeX ("$t$") ,
           y = NULL ,
           title = "Cumulative distribution function" ) +
    theme_minimal( ) 
  
  
  g1 / g2 / g3 + patchwork::plot_annotation(
    title = TeX ("$H_1: \\mu $") ,
    subtitle = str_c ("           " , type , " ",  test [["null.value"]] , " test results") ,
    caption = "red line: critical values
             dashed line: test statistic" ) +
    patchwork::plot_layout (guides = "collect")
  
}
